; InnoSetup Script for ${PROJECT_NAME}

#define MyProjectName "${PROJECT_NAME}"
#define MyProjectVersion "${PROJECT_VERSION}"
#define MyPackageVersion "${PROJECT_VERSION}"
#define MyAuthor "${PLUGIN_AUTHOR}"

[Setup]
AppId={{7F8E3B4D-9C2A-4E6B-8A1F-3D5C9E7B4A2F}}
AppName={#MyProjectName}
AppVersion={#MyProjectVersion}
AppPublisher={#MyAuthor}
AppPublisherURL=${PLUGIN_WEBSITE}
AppSupportURL=${PLUGIN_WEBSITE}
AppUpdatesURL=${PLUGIN_WEBSITE}
DefaultDirName={commonappdata}\obs-studio\plugins\{#MyProjectName}
DisableProgramGroupPage=yes
DisableDirPage=yes
DisableReadyPage=no
DisableWelcomePage=no
OutputBaseFilename={#MyProjectName}-{#MyPackageVersion}-windows-x64
OutputDir=.
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
PrivilegesRequiredOverridesAllowed=dialog
MinVersion=10.0.17763
ArchitecturesAllowed=x64
WizardStyle=modern
DirExistsWarning=no
AllowNoIcons=yes
UninstallFilesDir={commonappdata}\obs-studio\plugins\{#MyProjectName}\uninstall

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\release\Package\{#MyProjectName}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,${PROJECT_NAME}}"; Filename: "${PLUGIN_WEBSITE}"
Name: "{group}\{cm:UninstallProgram,${PROJECT_NAME}}"; Filename: "{uninstallexe}"

[Registry]
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}"; Flags: uninsdeletekey
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}"; ValueType: string; ValueName: "DisplayName"; ValueData: "{#SetupSetting("AppName")}"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}"; ValueType: string; ValueName: "DisplayVersion"; ValueData: "{#SetupSetting("AppVersion")}"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}"; ValueType: string; ValueName: "Publisher"; ValueData: "{#SetupSetting("AppPublisher")}"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}"; ValueType: string; ValueName: "UninstallString"; ValueData: "{uninstallexe}"
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}"; ValueType: dword; ValueName: "NoModify"; ValueData: 1
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}"; ValueType: dword; ValueName: "NoRepair"; ValueData: 1

[Code]
function InitializeSetup(): Boolean;
var
  ObsInstallPath: String;
begin
  // Check if OBS Studio is installed
  if RegQueryStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OBS Studio', 'InstallLocation', ObsInstallPath) or
     RegQueryStringValue(HKLM, 'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\OBS Studio', 'InstallLocation', ObsInstallPath) then
  begin
    Result := True;
  end
  else
  begin
    if MsgBox('OBS Studio does not appear to be installed on this system. Continue anyway?', mbConfirmation, MB_YESNO) = IDYES then
      Result := True
    else
      Result := False;
  end;
end;

function GetOBSPath(): String;
var
  ObsPath: String;
begin
  Result := '';
  
  // Check 64-bit registry first
  if RegQueryStringValue(HKLM, 'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\OBS Studio', 'InstallLocation', ObsPath) then
    Result := ObsPath
  else if RegQueryStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OBS Studio', 'InstallLocation', ObsPath) then
    Result := ObsPath
  else if RegQueryStringValue(HKCU, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OBS Studio', 'InstallLocation', ObsPath) then
    Result := ObsPath;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    MsgBox('{#MyProjectName} has been installed successfully!' + #13#10 + 
           'Please restart OBS Studio to use the plugin.' + #13#10 +
           'The plugin will appear in the Tools menu as "Audio to WebSocket Settings".', 
           mbInformation, MB_OK);
  end;
end;